AbstractClassFixDesc=Declare Abstract Class
# {0} - Class name
AbstractClassInstantiationDesc=Abstract class {0} can not be instantiated
AbstractClassInstantiationHintDispName=Abstract Class Instantiation
# {0} - Method name
AbstractFinalMethod=Method "{0}" can not be declared abstract and final
# {0} - Method name
AbstractPrivateMethod=Abstract method "{0}" can not be declared private
# {0} - Method name
AbstractWithBlockMethod=Abstract method "{0}" can not contain body
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
AccidentalAssignmentCustomizer.includeWhileCB.text=Check assignments in 'while' statements
AccidentalAssignmentCustomizer.AccessibleContext.accessibleDescription=Edit your settings for ignoring/including assignments
AccidentalAssignmentCustomizer.AccessibleContext.accessibleName=Assignments settings form
AccidentalAssignmentCustomizer.cbIncludeWhile.AccessibleContext.accessibleDescription=Enable to include assignments in 'while' statements
AccidentalAssignmentCustomizer.chkTopLvlStmtOnly.AccessibleContext.accessibleDescription=Enable to check assignments in sub-statements
AccidentalAssignmentCustomizer.cbIncludeWhile.AccessibleContext.accessibleName=Include assignments in 'while' statements
AccidentalAssignmentCustomizer.chkTopLvlStmtOnly.AccessibleContext.accessibleName=Check assignments in sub-statements
# {0} - Condition text
AccidentalAssignmentHintCustom=Accidental assignment in a condition {0}
AccidentalAssignmentHintDesc=Using an assignment operator (=) instead of comparison operator (===) is a frequent cause of bugs. Therefore assignments in conditional clauses should be avoided.
AccidentalAssignmentHintDispName=Accidental Assignments
AddBraces=Add Braces
# {0} - Modifier name
AddModifierFixDesc=Add modifier: {0}
# {0} - Use statement
AddUseImportFix_Description=Generate "{0}"
AddUseImportRuleDesc=Add Use Import
AddUseImportRuleDispName=Add Use Import
AmbiguousComparisonHintCustom=Possible accidental comparison found. Check if you wanted to use '=' instead.
AmbiguousComparisonHintDescName=Tries to reveal typos in assignments (assignments with more than one assignment operator).
AmbiguousComparisonHintDispName=Ambiguous Comparison
ArraySyntaxDesc=You can use new shorter array creation syntax
ArraySyntaxDescName=Allows you to change old array syntax to new shorter one.
ArraySyntaxDispName=Array Syntax
AssignmentHintFixDisp=Change Comparison to Assignment
AssignVariableHintDesc=Assign Return Value To New Variable
AssignVariableHintDisplayName=Introduce Variable
# {0} - Comparison text
ChangeAssignmentDisp=Change assignment to comparison: {0}
# {0} - Fixed name
ChangeNameFix_Description=Fix Name To "{0}"
CheckPHP54VerDesc=Detect language features not compatible with PHP version indicated in project settings
CheckPHP54VerDisp=Language feature not compatible with PHP version indicated in project settings
CheckPHP55VerDesc=Detect language features not compatible with PHP version indicated in project settings
CheckPHP55VerDisp=Language feature not compatible with PHP version indicated in project settings
CheckPHP56VerDesc=Detect language features not compatible with PHP version indicated in project settings
CheckPHP56VerDisp=Language feature not compatible with PHP version indicated in project settings
ClassLinesHintDesc=Maximum allowed lines per class declaration.
ClassLinesHintDisp=Class Declaration
# {0} - class length in lines
# {1} - allowed lines per class declaration
ClassLinesHintText=Class Length is {0} Lines ({1} allowed)
CTL_Hints_DisplayName=Hints
CTL_Hints_ToolTip=Static code verification for PHP
DoWhileBracesHintDesc=Do-While Loops Must Use Braces
DoWhileBracesHintDisp=Do-While Loops Must Use Braces
DoWhileBracesHintText=Do-While Loops Must Use Braces
EmptyStatementHintDesc=Empty statements should be removed.
EmptyStatementHintDisp=Empty Statement
EmptyStatementHintFix=Remove Empty Statement
EmptyStatementHintText=Empty Statement
ErrorControlOperatorHintDesc=Error control operator disables all error reporting for an affected expression. It should be used only for some special cases (like fopen(), unlink(), etc.). Otherwise it's a cause of an unexpected behavior of the application. Handle your errors in a common way.
ErrorControlOperatorHintDisp=Error Control Operator Misused
ErrorControlOperatorHintFix=Remove Error Control Operator
ErrorControlOperatorHintText=Error Control Operator Misused
# {0} - Class name
FinalPossibleAbstractClass=Class "{0}" contains abstract methods and can not be declared final
FixDesc=Use New Array Creation Syntax
ForBracesHintDesc=For Loops Must Use Braces
ForBracesHintDisp=For Loops Must Use Braces
ForBracesHintText=For Loops Must Use Braces
ForEachBracesHintDesc=ForEach Loops Must Use Braces
ForEachBracesHintDisp=ForEach Loops Must Use Braces
ForEachBracesHintText=ForEach Loops Must Use Braces
FunctionLinesHintDesc=Maximum allowed lines per function/method declaration.
FunctionLinesHintDisp=Function (Method) Declaration
# {0} - function length in lines
# {1} - allowed lines per function declaration
FunctionLinesHintText=Method Length is {0} Lines ({1} allowed)
IdenticalComparisonDesc=Comparison with "equal (==)" operator should be avoided, use "identical (===)" operator instead
IdenticalComparisonHintDesc=You should use "identical" instead of "equal" comparison to have better control over your code.
IdenticalComparisonHintDispName=Identical Comparisons
# {0} - Method name
IfaceMethodWithBlock=Interface method "{0}" can not contain body
IfBracesHintDesc=If-Else Statements Must Use Braces
IfBracesHintDisp=If-Else Statements Must Use Braces
IfBracesHintText=If-Else Statements Must Use Braces
ImmutableVariableHintDesc=Checks a number of assignments into a variable in a block.
ImmutableVariableHintDispName=Immutable Variables
# {0} - Number of allowed assignments
# {1} - Number of assignments
# {2} - Variable name
ImmutableVariablesHintCustom=You should use only:\n{0} assignment(s) ({1} used)\nto a variable:\n${2}\nto avoid accidentally overwriting it and make your code easier to read.
ImplementAbstractMethodsDesc=Implement All Abstract Methods
ImplementAbstractMethodsDispName=Implement All Abstract Methods
# {0} - Class name
# {1} - Abstract method name
# {2} - Owner (class) of abstract method
ImplementAbstractMethodsHintDesc={0} is not abstract and does not override abstract method {1} in {2}
InitializeFieldSuggestionDesc=Initializes field with a parameter passed to constructor.
InitializeFieldSuggestionDisp=Initialize Field in Constructor
# {0} - Field name
InitializeFieldSuggestionFix=Initialize Field: {0}
# {0} - Field name
InitializeFieldSuggestionText=Initialize Field: {0}
InterfaceLinesHintDesc=Maximum allowed lines per interface declaration.
InterfaceLinesHintDisp=Interface Declaration
# {0} - interface length in lines
# {1} - allowed lines per interface declaration
InterfaceLinesHintText=Interface Length is {0} Lines ({1} allowed)
# {0} - Constant name
# {1} - Class name
# {2} - File name
IntroduceHintClassConstDesc=Create Constant "{0}" in Class "{1}" ({2})
# {0} - Class name
# {1} - File name
IntroduceHintClassDesc=Create Class "{0}" in {1}
IntroduceHintDesc=Introduce Hint
IntroduceHintDispName=Introduce Hint
# {0} - Field name
# {1} - Class name
# {2} - File name
IntroduceHintFieldDesc=Create Field "{0}" in Class "{1}" ({2})
# {0} - Method name
# {1} - Class name
# {2} - File name
IntroduceHintMethodDesc=Create Method "{0}" in Class "{1}" ({2})
# {0} - Field name
# {1} - Class name
# {2} - File name
IntroduceHintStaticFieldDesc=Create Field "{0}" in Class "{1}" ({2})
# {0} - Method name
# {1} - Class name
# {2} - File name
IntroduceHintStaticMethodDesc=Create Method "{0}" in Class "{1}" ({2})
# {0} - Field name
# {1} - Modifier name
InvalidField=Field "{0}" can not be declared {1}
# {0} - Method name
# {1} - Modifier name
InvalidIfaceMethod=Interface method "{0}" can not be declared {1}
LoopOnlyKeywordsDesc=Checks whether the keyword is used in a proper control structure.
# {0} - name of keyword
LoopOnlyKeywordsDisp={0} outside of for, foreach, while, do-while or switch statement.
LoopOnlyKeywordsDispName=Keyword outside of for, foreach, while, do-while or switch statement.
# {0} - Method name
MethodRedeclarationCustom=Method or function "{0}" has already been declared
MethodRedeclarationHintDispName=Method Redeclaration
ModifiersCheckHintDispName=Modifiers Checker
NestedBlocksHintDesc=It is a good practice to introduce a new function (method) rather than to use more nested blocks.
NestedBlocksHintDisp=Nested Blocks in Functions
NestedBlocksHintText=Too Many Nested Blocks in Function Declaration\n- It is a good practice to introduce a new function rather than to use more nested blocks.
ParentConstructorCallHintDesc=Constructor of parent class should be called if exists (it ensures the right initialization of instantiated object).
ParentConstructorCallHintDisp=Parent Constructor Call
# {0} - Number of used parameters
# {1} - Number of mandatory parameters
# {2} - Number of optional parameters
ParentConstructorCallHintIsCalledText=Parent Constructor is Called\n- with wrong number of parameters: {0}.\n- {1} mandatory and {2} optional parameters needed.
# {0} - Number of mandatory parameters
# {1} - Number of optional parameters
ParentConstructorCallHintNotCalledText=Parent Constructor is Not Called\n- {0} mandatory and {1} optional parameters needed.\n- Your objects can be wrongly initialized.
PHP53VersionErrorHintDispName=Language feature not compatible with PHP version indicated in project settings
PHP54VersionErrorHintDispName=Language feature not compatible with PHP version indicated in project settings
PHP55VersionErrorHintDispName=Language feature not compatible with PHP version indicated in project settings
PHP56VersionErrorHintDispName=Language feature not compatible with PHP version indicated in project settings
PhpVersionErrorDesc=Detect language features not compatible with PHP version indicated in project settings
PhpVersionErrorDisp=Language feature not compatible with PHP version indicated in project settings
# {0} - Class name
PossibleAbstractClass=Class "{0}" contains abstract methods and must be declared abstract
PSR0NamespaceHintDesc=
PSR0NamespaceHintDisp=Namespace Declaration
PSR0TypeHintDesc=
PSR0TypeHintDisp=Type Declaration
# {0} - Text which describes the violation
PSR0ViolationHintText=PSR-0 Violation:\n{0}
PSR0WrongNamespaceNameHintText=Namespace declaration name doesn't correspond to current directory structure.
PSR0WrongTypeNameHintText=Type declaration name doesn't correspond to current file path.
PSR1ConstantDeclarationHintText=Class constants MUST be declared in all upper case with underscore separators.
PSR1ConstantHintDesc=Class constants MUST be declared in all upper case with underscore separators.
PSR1ConstantHintDisp=Class Constant Declaration
PSR1MethodDeclarationHintDesc=Method names MUST be declared in camelCase().
PSR1MethodDeclarationHintDisp=Method Declaration
PSR1MethodDeclarationHintText=Method names MUST be declared in camelCase().
PSR1PropertyNameHintDesc=Property names SHOULD be declared in $StudlyCaps, $camelCase, or $under_score format (consistently in a scope).
PSR1PropertyNameHintDisp=Property Name
PSR1PropertyNameHintText=Property names SHOULD be declared in $StudlyCaps, $camelCase, or $under_score format (consistently in a scope).\nPrevious property usage was in a different format, or this property name is absolutely wrong.
PSR1SideEffectHintDesc=A file SHOULD declare new symbols and cause no other side effects, or it SHOULD execute logic with side effects, but SHOULD NOT do both.
PSR1SideEffectHintDisp=Side Effects
PSR1SideEffectHintText=A file SHOULD declare new symbols and cause no other side effects, or it SHOULD execute logic with side effects, but SHOULD NOT do both.
PSR1TypeDeclaration52HintText=Type names SHOULD use the pseudo-namespacing convention of Vendor_ prefixes on type names.
PSR1TypeDeclaration53HintText=Type names MUST be declared in StudlyCaps.
PSR1TypeDeclaration53NoNsHintText=Each type MUST be in a namespace of at least one level: a top-level vendor name.
PSR1TypeDeclarationHintDesc=Type names MUST be declared in StudlyCaps (Code written for 5.2.x and before SHOULD use the pseudo-namespacing convention of Vendor_ prefixes on type names). Each type is in a file by itself, and is in a namespace of at least one level: a top-level vendor name.
PSR1TypeDeclarationHintDisp=Type Declaration
PSR1TypeDeclarationMoreTypesHintText=Each type MUST be in a file by itself.
# {0} - Text which describes the violation
PSR1ViolationHintText=PSR-1 Violation:\n{0}
# {0} - Method or function name
RearrangeParamsDisp=Rearrange arguments of the method or function: {0}
# {0} - Method name
RemoveBodyFixDesc=Remove body of the method: {0}
# {0} - Modifier name
RemoveModifierFixDesc=Remove modifier: {0}
RemoveUnusedUseFixDesc=Remove Unused Use Statement
# {0} - Superglobal Array Name
SuperglobalHintText=Do not Access Superglobal {0} Array Directly.\n\nUse some filtering functions instead (e.g. filter_input(), conditions with is_*() functions, etc.).
SuperglobalsHintDesc=Use some filtering functions instead (e.g. filter_input(), conditions with is_*() functions, etc.).
# {0} - Superglobal Array Name
SuperglobalsHintDisp=Do not Access {0} Array Directly
TooManyReturnStatementsHintDesc=It is a good practice to have just one return point from functions and methods. It makes it more difficult to read such a function where more return statements are used.
TooManyReturnStatementsHintDisp=Too Many Return Statements
TooManyReturnStatementsHintText=Too Many Return Statements
TraitLinesHintDesc=Maximum allowed lines per trait declaration.
TraitLinesHintDisp=Trait Declaration
# {0} - trait length in lines
# {1} - allowed lines per trait declaration
TraitLinesHintText=Trait Length is {0} Lines ({1} allowed)
# {0} - Type name
TypeRedeclarationDesc=Type "{0}" has been already declared
TypeRedeclarationRuleDispName=Type Redeclaration
UninitializedVariableHintDesc=Detects variables which are used, but not initialized.<br><br>Every variable should be initialized before its first use.
UninitializedVariableHintDispName=Uninitialized Variables
# {0} - Name of the variable
UninitializedVariableVariableHintCustom=Variable ${0} seems to be uninitialized
UnnecessaryClosingDelimiterHintDesc=It is a good practise to omit closing PHP delimiter at the end of file. It's just a source of "Headers already sent" errors.
UnnecessaryClosingDelimiterHintDisp=Unnecessary Closing Delimiter
UnnecessaryClosingDelimiterHintFix=Remove Closing Delimiter
UnnecessaryClosingDelimiterHintText=Unnecessary Closing Delimiter
UnreachableStatementHintDesc=Detects unreachable statements after return, throw, break and continue statements.
UnreachableStatementHintDisp=Unreachable Statement
UnreachableStatementHintText=Unreachable Statement
UnsedUsesHintDisp=Unused Use Statement
UnusedUsesHintDesc=Checks unused use statements.
UnusedVariableCustomizer.checkUnusedFormalParametersCheckBox.text=Check Unused Method/Function Parameters
AccidentalAssignmentCustomizer.checkAssignmentsInSubStatementsCheckBox.text=Check assignments in sub-statements
UninitializedVariableCustomizer.checkVariablesInitializedByReferenceCheckBox.text=Check Variables Initialized by Reference
UninitializedVariableCustomizer.jLabel1.text=Warning:
UninitializedVariableCustomizer.jLabel2.text=This setting can significantly slow down your IDE!
ImmutableVariablesCustomizer.jLabel1.text=Number of Allowed Assignments per Variable:
csl-hints/text/x-php5/hints/braces=Braces
csl-hints/text/x-php5/hints/psr0=PSR-0: Autoloading Standard
csl-hints/text/x-php5/hints/psr1=PSR-1: Basic Coding Standard
csl-hints/text/x-php5/hints/superglobals=Superglobals
csl-hints/text/x-php5/hints/toomanylines=Too Many Lines
NestedHintsCustomizer.jLabel1.text=Number of Allowed Nested Blocks:
NestedHintsCustomizer.allowConditionBlockCheckBox.text=&Allow One Extra Block for a Condition in Loops
FunctionLinesCustomizer.maxAllowedLinesLabel.text=Maximum Number of Allowed Lines per Function/Method Declaration:
ClassLinesCustomizer.maxAllowedLinesLabel.text=Maximum Number of Allowed Lines per Class Declaration:
InterfaceLinesCustomizer.maxAllowedLinesLabel.text=Maximum Number of Allowed Lines per Interface Declaration:
TraitLinesCustomizer.maxAllowedLinesLabel.text=Maximum Number of Allowed Lines per Trait Declaration:
# {0} - Name of the variable
UnusedVariableHintCustom=Variable ${0} seems to be unused in its scope
UnusedVariableHintDesc=Detects variables which are declared, but not used in their scope.
UnusedVariableHintDispName=Unused Variables
VarDocHintDesc=Generate Type Comment For Variable
VarDocHintDispName=Generate Type Comment For Variable /* @var $myvariable MyClass */
WhileBracesHintDesc=While Loops Must Use Braces
WhileBracesHintDisp=While Loops Must Use Braces
WhileBracesHintText=While Loops Must Use Braces
WithoutTypeFixDesc=Fix comparison: ===
# {0} - Type name
WithRightTypeFixDesc=Fix comparison: === ({0}) 
WrongOrderOfArgsDesc=Wrong order of arguments
WrongOrderOfArgsHintDesc=Optional arguments should be grouped on the right side for better readability.<br><br>Example offending code:<br><code>function foo($optional=NULL, $required){}</code><br><br>Recommended code:<br><code>function foo($required, $optional=NULL){}</code>
WrongOrderOfArgsHintDispName=Order of Arguments
WrongParamNameHintDesc=Parameter names in @param annotations should correspond with parameter names in commented functions.
WrongParamNameHintFix=Rename Param
WrongParamNameHintName=Wrong Param Name
WrongParamNameHintText=Wrong Param Name
