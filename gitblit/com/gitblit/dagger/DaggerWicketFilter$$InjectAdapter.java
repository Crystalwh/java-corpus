// Code generated by dagger-compiler.  Do not edit.
package com.gitblit.dagger;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<DaggerWicketFilter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code DaggerWicketFilter} and its
 * dependencies.
 * 
 * Being a {@code Provider<DaggerWicketFilter>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<DaggerWicketFilter>} and handling injection
 * of annotated fields.
 */
public final class DaggerWicketFilter$$InjectAdapter extends Binding<DaggerWicketFilter>
    implements Provider<DaggerWicketFilter>, MembersInjector<DaggerWicketFilter> {
  private Binding<Provider<org.apache.wicket.protocol.http.WebApplication>> webApplicationProvider;
  private Binding<org.apache.wicket.protocol.http.WicketFilter> supertype;

  public DaggerWicketFilter$$InjectAdapter() {
    super("com.gitblit.dagger.DaggerWicketFilter", "members/com.gitblit.dagger.DaggerWicketFilter", NOT_SINGLETON, DaggerWicketFilter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    webApplicationProvider = (Binding<Provider<org.apache.wicket.protocol.http.WebApplication>>) linker.requestBinding("javax.inject.Provider<org.apache.wicket.protocol.http.WebApplication>", DaggerWicketFilter.class, getClass().getClassLoader());
    supertype = (Binding<org.apache.wicket.protocol.http.WicketFilter>) linker.requestBinding("members/org.apache.wicket.protocol.http.WicketFilter", DaggerWicketFilter.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(webApplicationProvider);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<DaggerWicketFilter>}.
   */
  @Override
  public DaggerWicketFilter get() {
    DaggerWicketFilter result = new DaggerWicketFilter();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<DaggerWicketFilter>}.
   */
  @Override
  public void injectMembers(DaggerWicketFilter object) {
    object.webApplicationProvider = webApplicationProvider.get();
    supertype.injectMembers(object);
  }
}
