// Code generated by dagger-compiler.  Do not edit.
package com.gitblit.servlet;


import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<RobotsTxtServlet>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code RobotsTxtServlet} and its
 * dependencies.
 * 
 * Being a {@code Provider<RobotsTxtServlet>} and handling creation and
 * preparation of object instances.
 */
public final class RobotsTxtServlet$$InjectAdapter extends Binding<RobotsTxtServlet>
    implements Provider<RobotsTxtServlet> {
  private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;

  public RobotsTxtServlet$$InjectAdapter() {
    super("com.gitblit.servlet.RobotsTxtServlet", "members/com.gitblit.servlet.RobotsTxtServlet", IS_SINGLETON, RobotsTxtServlet.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", RobotsTxtServlet.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(runtimeManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<RobotsTxtServlet>}.
   */
  @Override
  public RobotsTxtServlet get() {
    RobotsTxtServlet result = new RobotsTxtServlet(runtimeManager.get());
    return result;
  }
}
