// Code generated by dagger-compiler.  Do not edit.
package com.gitblit.servlet;


import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<EnforceAuthenticationFilter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code EnforceAuthenticationFilter} and its
 * dependencies.
 * 
 * Being a {@code Provider<EnforceAuthenticationFilter>} and handling creation and
 * preparation of object instances.
 */
public final class EnforceAuthenticationFilter$$InjectAdapter extends Binding<EnforceAuthenticationFilter>
    implements Provider<EnforceAuthenticationFilter> {
  private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
  private Binding<com.gitblit.manager.IAuthenticationManager> authenticationManager;

  public EnforceAuthenticationFilter$$InjectAdapter() {
    super("com.gitblit.servlet.EnforceAuthenticationFilter", "members/com.gitblit.servlet.EnforceAuthenticationFilter", IS_SINGLETON, EnforceAuthenticationFilter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", EnforceAuthenticationFilter.class, getClass().getClassLoader());
    authenticationManager = (Binding<com.gitblit.manager.IAuthenticationManager>) linker.requestBinding("com.gitblit.manager.IAuthenticationManager", EnforceAuthenticationFilter.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(runtimeManager);
    getBindings.add(authenticationManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<EnforceAuthenticationFilter>}.
   */
  @Override
  public EnforceAuthenticationFilter get() {
    EnforceAuthenticationFilter result = new EnforceAuthenticationFilter(runtimeManager.get(), authenticationManager.get());
    return result;
  }
}
