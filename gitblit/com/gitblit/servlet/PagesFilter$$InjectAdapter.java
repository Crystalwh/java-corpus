// Code generated by dagger-compiler.  Do not edit.
package com.gitblit.servlet;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<PagesFilter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code PagesFilter} and its
 * dependencies.
 * 
 * Being a {@code Provider<PagesFilter>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<PagesFilter>} and handling injection
 * of annotated fields.
 */
public final class PagesFilter$$InjectAdapter extends Binding<PagesFilter>
    implements Provider<PagesFilter>, MembersInjector<PagesFilter> {
  private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
  private Binding<com.gitblit.manager.IAuthenticationManager> authenticationManager;
  private Binding<com.gitblit.manager.IRepositoryManager> repositoryManager;
  private Binding<AccessRestrictionFilter> supertype;

  public PagesFilter$$InjectAdapter() {
    super("com.gitblit.servlet.PagesFilter", "members/com.gitblit.servlet.PagesFilter", IS_SINGLETON, PagesFilter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", PagesFilter.class, getClass().getClassLoader());
    authenticationManager = (Binding<com.gitblit.manager.IAuthenticationManager>) linker.requestBinding("com.gitblit.manager.IAuthenticationManager", PagesFilter.class, getClass().getClassLoader());
    repositoryManager = (Binding<com.gitblit.manager.IRepositoryManager>) linker.requestBinding("com.gitblit.manager.IRepositoryManager", PagesFilter.class, getClass().getClassLoader());
    supertype = (Binding<AccessRestrictionFilter>) linker.requestBinding("members/com.gitblit.servlet.AccessRestrictionFilter", PagesFilter.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(runtimeManager);
    getBindings.add(authenticationManager);
    getBindings.add(repositoryManager);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<PagesFilter>}.
   */
  @Override
  public PagesFilter get() {
    PagesFilter result = new PagesFilter(runtimeManager.get(), authenticationManager.get(), repositoryManager.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<PagesFilter>}.
   */
  @Override
  public void injectMembers(PagesFilter object) {
    supertype.injectMembers(object);
  }
}
