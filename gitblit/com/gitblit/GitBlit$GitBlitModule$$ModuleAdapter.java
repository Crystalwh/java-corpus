// Code generated by dagger-compiler.  Do not edit.
package com.gitblit;


import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class GitBlit$GitBlitModule$$ModuleAdapter extends ModuleAdapter<com.gitblit.GitBlit.GitBlitModule> {
  private static final String[] INJECTS = { "members/com.gitblit.IStoredSettings", "com.gitblit.manager.IRuntimeManager", "com.gitblit.manager.IPluginManager", "com.gitblit.manager.INotificationManager", "com.gitblit.manager.IUserManager", "com.gitblit.manager.IAuthenticationManager", "com.gitblit.manager.IRepositoryManager", "com.gitblit.manager.IProjectManager", "com.gitblit.manager.IFederationManager", "com.gitblit.manager.IGitblit", "members/com.gitblit.tickets.NullTicketService", "members/com.gitblit.tickets.FileTicketService", "members/com.gitblit.tickets.BranchTicketService", "members/com.gitblit.tickets.RedisTicketService", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public GitBlit$GitBlitModule$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.gitblit.IStoredSettings", new ProvideSettingsProvidesAdapter(module));
    map.put("com.gitblit.manager.IRuntimeManager", new ProvideRuntimeManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IPluginManager", new ProvidePluginManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.INotificationManager", new ProvideNotificationManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IUserManager", new ProvideUserManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IAuthenticationManager", new ProvideAuthenticationManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IRepositoryManager", new ProvideRepositoryManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IProjectManager", new ProvideProjectManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IFederationManager", new ProvideFederationManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IGitblit", new ProvideGitblitProvidesAdapter(module));
    map.put("com.gitblit.tickets.NullTicketService", new ProvideNullTicketServiceProvidesAdapter(module));
    map.put("com.gitblit.tickets.FileTicketService", new ProvideFileTicketServiceProvidesAdapter(module));
    map.put("com.gitblit.tickets.BranchTicketService", new ProvideBranchTicketServiceProvidesAdapter(module));
    map.put("com.gitblit.tickets.RedisTicketService", new ProvideRedisTicketServiceProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.gitblit.IStoredSettings>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.IStoredSettings>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSettingsProvidesAdapter extends Binding<IStoredSettings>
      implements Provider<IStoredSettings> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideSettingsProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.IStoredSettings", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideSettings()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.IStoredSettings>}.
     */
    @Override
    public IStoredSettings get() {
      return module.provideSettings();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IRuntimeManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IRuntimeManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRuntimeManagerProvidesAdapter extends Binding<com.gitblit.manager.IRuntimeManager>
      implements Provider<com.gitblit.manager.IRuntimeManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideRuntimeManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IRuntimeManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideRuntimeManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IRuntimeManager>}.
     */
    @Override
    public com.gitblit.manager.IRuntimeManager get() {
      return module.provideRuntimeManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IPluginManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IPluginManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePluginManagerProvidesAdapter extends Binding<com.gitblit.manager.IPluginManager>
      implements Provider<com.gitblit.manager.IPluginManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvidePluginManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IPluginManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.providePluginManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IPluginManager>}.
     */
    @Override
    public com.gitblit.manager.IPluginManager get() {
      return module.providePluginManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.INotificationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.INotificationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideNotificationManagerProvidesAdapter extends Binding<com.gitblit.manager.INotificationManager>
      implements Provider<com.gitblit.manager.INotificationManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideNotificationManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.INotificationManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideNotificationManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.INotificationManager>}.
     */
    @Override
    public com.gitblit.manager.INotificationManager get() {
      return module.provideNotificationManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IUserManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IUserManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideUserManagerProvidesAdapter extends Binding<com.gitblit.manager.IUserManager>
      implements Provider<com.gitblit.manager.IUserManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideUserManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IUserManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideUserManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IUserManager>}.
     */
    @Override
    public com.gitblit.manager.IUserManager get() {
      return module.provideUserManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IAuthenticationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IAuthenticationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAuthenticationManagerProvidesAdapter extends Binding<com.gitblit.manager.IAuthenticationManager>
      implements Provider<com.gitblit.manager.IAuthenticationManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideAuthenticationManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IAuthenticationManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideAuthenticationManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IAuthenticationManager>}.
     */
    @Override
    public com.gitblit.manager.IAuthenticationManager get() {
      return module.provideAuthenticationManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IRepositoryManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IRepositoryManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRepositoryManagerProvidesAdapter extends Binding<com.gitblit.manager.IRepositoryManager>
      implements Provider<com.gitblit.manager.IRepositoryManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideRepositoryManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IRepositoryManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideRepositoryManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IRepositoryManager>}.
     */
    @Override
    public com.gitblit.manager.IRepositoryManager get() {
      return module.provideRepositoryManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IProjectManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IProjectManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideProjectManagerProvidesAdapter extends Binding<com.gitblit.manager.IProjectManager>
      implements Provider<com.gitblit.manager.IProjectManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideProjectManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IProjectManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideProjectManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IProjectManager>}.
     */
    @Override
    public com.gitblit.manager.IProjectManager get() {
      return module.provideProjectManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IFederationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IFederationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFederationManagerProvidesAdapter extends Binding<com.gitblit.manager.IFederationManager>
      implements Provider<com.gitblit.manager.IFederationManager> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideFederationManagerProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IFederationManager", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideFederationManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IFederationManager>}.
     */
    @Override
    public com.gitblit.manager.IFederationManager get() {
      return module.provideFederationManager();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IGitblit>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.manager.IGitblit>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideGitblitProvidesAdapter extends Binding<com.gitblit.manager.IGitblit>
      implements Provider<com.gitblit.manager.IGitblit> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideGitblitProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.manager.IGitblit", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideGitblit()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IGitblit>}.
     */
    @Override
    public com.gitblit.manager.IGitblit get() {
      return module.provideGitblit();
    }
  }

  /**
   * A {@code Binder<com.gitblit.tickets.NullTicketService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.tickets.NullTicketService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideNullTicketServiceProvidesAdapter extends Binding<com.gitblit.tickets.NullTicketService>
      implements Provider<com.gitblit.tickets.NullTicketService> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideNullTicketServiceProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.tickets.NullTicketService", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideNullTicketService()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.tickets.NullTicketService>}.
     */
    @Override
    public com.gitblit.tickets.NullTicketService get() {
      return module.provideNullTicketService();
    }
  }

  /**
   * A {@code Binder<com.gitblit.tickets.FileTicketService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.tickets.FileTicketService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFileTicketServiceProvidesAdapter extends Binding<com.gitblit.tickets.FileTicketService>
      implements Provider<com.gitblit.tickets.FileTicketService> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideFileTicketServiceProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.tickets.FileTicketService", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideFileTicketService()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.tickets.FileTicketService>}.
     */
    @Override
    public com.gitblit.tickets.FileTicketService get() {
      return module.provideFileTicketService();
    }
  }

  /**
   * A {@code Binder<com.gitblit.tickets.BranchTicketService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.tickets.BranchTicketService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBranchTicketServiceProvidesAdapter extends Binding<com.gitblit.tickets.BranchTicketService>
      implements Provider<com.gitblit.tickets.BranchTicketService> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideBranchTicketServiceProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.tickets.BranchTicketService", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideBranchTicketService()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.tickets.BranchTicketService>}.
     */
    @Override
    public com.gitblit.tickets.BranchTicketService get() {
      return module.provideBranchTicketService();
    }
  }

  /**
   * A {@code Binder<com.gitblit.tickets.RedisTicketService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.tickets.RedisTicketService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRedisTicketServiceProvidesAdapter extends Binding<com.gitblit.tickets.RedisTicketService>
      implements Provider<com.gitblit.tickets.RedisTicketService> {
    private final com.gitblit.GitBlit.GitBlitModule module;

    public ProvideRedisTicketServiceProvidesAdapter(com.gitblit.GitBlit.GitBlitModule module) {
      super("com.gitblit.tickets.RedisTicketService", null, IS_SINGLETON, "com.gitblit.GitBlit.GitBlitModule.provideRedisTicketService()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.tickets.RedisTicketService>}.
     */
    @Override
    public com.gitblit.tickets.RedisTicketService get() {
      return module.provideRedisTicketService();
    }
  }
}
