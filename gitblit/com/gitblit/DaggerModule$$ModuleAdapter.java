// Code generated by dagger-compiler.  Do not edit.
package com.gitblit;


import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DaggerModule$$ModuleAdapter extends ModuleAdapter<DaggerModule> {
  private static final String[] INJECTS = { "members/com.gitblit.IStoredSettings", "com.gitblit.utils.XssFilter", "com.gitblit.manager.IRuntimeManager", "com.gitblit.manager.IPluginManager", "com.gitblit.manager.INotificationManager", "com.gitblit.manager.IUserManager", "com.gitblit.manager.IAuthenticationManager", "members/com.gitblit.transport.ssh.IPublicKeyManager", "com.gitblit.manager.IRepositoryManager", "com.gitblit.manager.IProjectManager", "com.gitblit.manager.IFederationManager", "com.gitblit.manager.IGitblit", "members/com.gitblit.wicket.GitBlitWebApp", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DaggerModule$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public DaggerModule newModule() {
    return new com.gitblit.DaggerModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.gitblit.IStoredSettings", new ProvideSettingsProvidesAdapter(module));
    map.put("com.gitblit.utils.XssFilter", new ProvideXssFilterProvidesAdapter(module));
    map.put("com.gitblit.manager.IRuntimeManager", new ProvideRuntimeManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IPluginManager", new ProvidePluginManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.INotificationManager", new ProvideNotificationManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IUserManager", new ProvideUserManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IAuthenticationManager", new ProvideAuthenticationManagerProvidesAdapter(module));
    map.put("com.gitblit.transport.ssh.IPublicKeyManager", new ProvidePublicKeyManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IRepositoryManager", new ProvideRepositoryManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IProjectManager", new ProvideProjectManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IFederationManager", new ProvideFederationManagerProvidesAdapter(module));
    map.put("com.gitblit.manager.IGitblit", new ProvideGitblitProvidesAdapter(module));
    map.put("com.gitblit.wicket.GitBlitWebApp", new ProvideWebApplicationProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.gitblit.IStoredSettings>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.IStoredSettings>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSettingsProvidesAdapter extends Binding<IStoredSettings>
      implements Provider<IStoredSettings> {
    private final DaggerModule module;

    public ProvideSettingsProvidesAdapter(DaggerModule module) {
      super("com.gitblit.IStoredSettings", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideSettings()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.IStoredSettings>}.
     */
    @Override
    public IStoredSettings get() {
      return module.provideSettings();
    }
  }

  /**
   * A {@code Binder<com.gitblit.utils.XssFilter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.gitblit.utils.XssFilter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideXssFilterProvidesAdapter extends Binding<com.gitblit.utils.XssFilter>
      implements Provider<com.gitblit.utils.XssFilter> {
    private final DaggerModule module;

    public ProvideXssFilterProvidesAdapter(DaggerModule module) {
      super("com.gitblit.utils.XssFilter", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideXssFilter()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.utils.XssFilter>}.
     */
    @Override
    public com.gitblit.utils.XssFilter get() {
      return module.provideXssFilter();
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IRuntimeManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IRuntimeManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IRuntimeManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRuntimeManagerProvidesAdapter extends Binding<com.gitblit.manager.IRuntimeManager>
      implements Provider<com.gitblit.manager.IRuntimeManager> {
    private final DaggerModule module;
    private Binding<IStoredSettings> settings;
    private Binding<com.gitblit.utils.XssFilter> xssFilter;

    public ProvideRuntimeManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IRuntimeManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideRuntimeManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      settings = (Binding<IStoredSettings>) linker.requestBinding("com.gitblit.IStoredSettings", DaggerModule.class, getClass().getClassLoader());
      xssFilter = (Binding<com.gitblit.utils.XssFilter>) linker.requestBinding("com.gitblit.utils.XssFilter", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(settings);
      getBindings.add(xssFilter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IRuntimeManager>}.
     */
    @Override
    public com.gitblit.manager.IRuntimeManager get() {
      return module.provideRuntimeManager(settings.get(), xssFilter.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IPluginManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IPluginManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IPluginManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePluginManagerProvidesAdapter extends Binding<com.gitblit.manager.IPluginManager>
      implements Provider<com.gitblit.manager.IPluginManager> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;

    public ProvidePluginManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IPluginManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.providePluginManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IPluginManager>}.
     */
    @Override
    public com.gitblit.manager.IPluginManager get() {
      return module.providePluginManager(runtimeManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.INotificationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.INotificationManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.INotificationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideNotificationManagerProvidesAdapter extends Binding<com.gitblit.manager.INotificationManager>
      implements Provider<com.gitblit.manager.INotificationManager> {
    private final DaggerModule module;
    private Binding<IStoredSettings> settings;

    public ProvideNotificationManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.INotificationManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideNotificationManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      settings = (Binding<IStoredSettings>) linker.requestBinding("com.gitblit.IStoredSettings", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(settings);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.INotificationManager>}.
     */
    @Override
    public com.gitblit.manager.INotificationManager get() {
      return module.provideNotificationManager(settings.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IUserManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IUserManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IUserManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideUserManagerProvidesAdapter extends Binding<com.gitblit.manager.IUserManager>
      implements Provider<com.gitblit.manager.IUserManager> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
    private Binding<com.gitblit.manager.IPluginManager> pluginManager;

    public ProvideUserManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IUserManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideUserManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
      pluginManager = (Binding<com.gitblit.manager.IPluginManager>) linker.requestBinding("com.gitblit.manager.IPluginManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
      getBindings.add(pluginManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IUserManager>}.
     */
    @Override
    public com.gitblit.manager.IUserManager get() {
      return module.provideUserManager(runtimeManager.get(), pluginManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IAuthenticationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IAuthenticationManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IAuthenticationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAuthenticationManagerProvidesAdapter extends Binding<com.gitblit.manager.IAuthenticationManager>
      implements Provider<com.gitblit.manager.IAuthenticationManager> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
    private Binding<com.gitblit.manager.IUserManager> userManager;

    public ProvideAuthenticationManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IAuthenticationManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideAuthenticationManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
      userManager = (Binding<com.gitblit.manager.IUserManager>) linker.requestBinding("com.gitblit.manager.IUserManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
      getBindings.add(userManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IAuthenticationManager>}.
     */
    @Override
    public com.gitblit.manager.IAuthenticationManager get() {
      return module.provideAuthenticationManager(runtimeManager.get(), userManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.transport.ssh.IPublicKeyManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.transport.ssh.IPublicKeyManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.transport.ssh.IPublicKeyManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePublicKeyManagerProvidesAdapter extends Binding<com.gitblit.transport.ssh.IPublicKeyManager>
      implements Provider<com.gitblit.transport.ssh.IPublicKeyManager> {
    private final DaggerModule module;
    private Binding<IStoredSettings> settings;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;

    public ProvidePublicKeyManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.transport.ssh.IPublicKeyManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.providePublicKeyManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      settings = (Binding<IStoredSettings>) linker.requestBinding("com.gitblit.IStoredSettings", DaggerModule.class, getClass().getClassLoader());
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(settings);
      getBindings.add(runtimeManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.transport.ssh.IPublicKeyManager>}.
     */
    @Override
    public com.gitblit.transport.ssh.IPublicKeyManager get() {
      return module.providePublicKeyManager(settings.get(), runtimeManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IRepositoryManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IRepositoryManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IRepositoryManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRepositoryManagerProvidesAdapter extends Binding<com.gitblit.manager.IRepositoryManager>
      implements Provider<com.gitblit.manager.IRepositoryManager> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
    private Binding<com.gitblit.manager.IPluginManager> pluginManager;
    private Binding<com.gitblit.manager.IUserManager> userManager;

    public ProvideRepositoryManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IRepositoryManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideRepositoryManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
      pluginManager = (Binding<com.gitblit.manager.IPluginManager>) linker.requestBinding("com.gitblit.manager.IPluginManager", DaggerModule.class, getClass().getClassLoader());
      userManager = (Binding<com.gitblit.manager.IUserManager>) linker.requestBinding("com.gitblit.manager.IUserManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
      getBindings.add(pluginManager);
      getBindings.add(userManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IRepositoryManager>}.
     */
    @Override
    public com.gitblit.manager.IRepositoryManager get() {
      return module.provideRepositoryManager(runtimeManager.get(), pluginManager.get(), userManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IProjectManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IProjectManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IProjectManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideProjectManagerProvidesAdapter extends Binding<com.gitblit.manager.IProjectManager>
      implements Provider<com.gitblit.manager.IProjectManager> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
    private Binding<com.gitblit.manager.IUserManager> userManager;
    private Binding<com.gitblit.manager.IRepositoryManager> repositoryManager;

    public ProvideProjectManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IProjectManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideProjectManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
      userManager = (Binding<com.gitblit.manager.IUserManager>) linker.requestBinding("com.gitblit.manager.IUserManager", DaggerModule.class, getClass().getClassLoader());
      repositoryManager = (Binding<com.gitblit.manager.IRepositoryManager>) linker.requestBinding("com.gitblit.manager.IRepositoryManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
      getBindings.add(userManager);
      getBindings.add(repositoryManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IProjectManager>}.
     */
    @Override
    public com.gitblit.manager.IProjectManager get() {
      return module.provideProjectManager(runtimeManager.get(), userManager.get(), repositoryManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IFederationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IFederationManager} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IFederationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFederationManagerProvidesAdapter extends Binding<com.gitblit.manager.IFederationManager>
      implements Provider<com.gitblit.manager.IFederationManager> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
    private Binding<com.gitblit.manager.INotificationManager> notificationManager;
    private Binding<com.gitblit.manager.IRepositoryManager> repositoryManager;

    public ProvideFederationManagerProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IFederationManager", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideFederationManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
      notificationManager = (Binding<com.gitblit.manager.INotificationManager>) linker.requestBinding("com.gitblit.manager.INotificationManager", DaggerModule.class, getClass().getClassLoader());
      repositoryManager = (Binding<com.gitblit.manager.IRepositoryManager>) linker.requestBinding("com.gitblit.manager.IRepositoryManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
      getBindings.add(notificationManager);
      getBindings.add(repositoryManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IFederationManager>}.
     */
    @Override
    public com.gitblit.manager.IFederationManager get() {
      return module.provideFederationManager(runtimeManager.get(), notificationManager.get(), repositoryManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.manager.IGitblit>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.manager.IGitblit} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.manager.IGitblit>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideGitblitProvidesAdapter extends Binding<com.gitblit.manager.IGitblit>
      implements Provider<com.gitblit.manager.IGitblit> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
    private Binding<com.gitblit.manager.IPluginManager> pluginManager;
    private Binding<com.gitblit.manager.INotificationManager> notificationManager;
    private Binding<com.gitblit.manager.IUserManager> userManager;
    private Binding<com.gitblit.manager.IAuthenticationManager> authenticationManager;
    private Binding<com.gitblit.transport.ssh.IPublicKeyManager> publicKeyManager;
    private Binding<com.gitblit.manager.IRepositoryManager> repositoryManager;
    private Binding<com.gitblit.manager.IProjectManager> projectManager;
    private Binding<com.gitblit.manager.IFederationManager> federationManager;

    public ProvideGitblitProvidesAdapter(DaggerModule module) {
      super("com.gitblit.manager.IGitblit", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideGitblit()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
      pluginManager = (Binding<com.gitblit.manager.IPluginManager>) linker.requestBinding("com.gitblit.manager.IPluginManager", DaggerModule.class, getClass().getClassLoader());
      notificationManager = (Binding<com.gitblit.manager.INotificationManager>) linker.requestBinding("com.gitblit.manager.INotificationManager", DaggerModule.class, getClass().getClassLoader());
      userManager = (Binding<com.gitblit.manager.IUserManager>) linker.requestBinding("com.gitblit.manager.IUserManager", DaggerModule.class, getClass().getClassLoader());
      authenticationManager = (Binding<com.gitblit.manager.IAuthenticationManager>) linker.requestBinding("com.gitblit.manager.IAuthenticationManager", DaggerModule.class, getClass().getClassLoader());
      publicKeyManager = (Binding<com.gitblit.transport.ssh.IPublicKeyManager>) linker.requestBinding("com.gitblit.transport.ssh.IPublicKeyManager", DaggerModule.class, getClass().getClassLoader());
      repositoryManager = (Binding<com.gitblit.manager.IRepositoryManager>) linker.requestBinding("com.gitblit.manager.IRepositoryManager", DaggerModule.class, getClass().getClassLoader());
      projectManager = (Binding<com.gitblit.manager.IProjectManager>) linker.requestBinding("com.gitblit.manager.IProjectManager", DaggerModule.class, getClass().getClassLoader());
      federationManager = (Binding<com.gitblit.manager.IFederationManager>) linker.requestBinding("com.gitblit.manager.IFederationManager", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
      getBindings.add(pluginManager);
      getBindings.add(notificationManager);
      getBindings.add(userManager);
      getBindings.add(authenticationManager);
      getBindings.add(publicKeyManager);
      getBindings.add(repositoryManager);
      getBindings.add(projectManager);
      getBindings.add(federationManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.manager.IGitblit>}.
     */
    @Override
    public com.gitblit.manager.IGitblit get() {
      return module.provideGitblit(runtimeManager.get(), pluginManager.get(), notificationManager.get(), userManager.get(), authenticationManager.get(), publicKeyManager.get(), repositoryManager.get(), projectManager.get(), federationManager.get());
    }
  }

  /**
   * A {@code Binder<com.gitblit.wicket.GitBlitWebApp>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.gitblit.wicket.GitBlitWebApp} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.gitblit.wicket.GitBlitWebApp>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideWebApplicationProvidesAdapter extends Binding<com.gitblit.wicket.GitBlitWebApp>
      implements Provider<com.gitblit.wicket.GitBlitWebApp> {
    private final DaggerModule module;
    private Binding<com.gitblit.manager.IRuntimeManager> runtimeManager;
    private Binding<com.gitblit.manager.IPluginManager> pluginManager;
    private Binding<com.gitblit.manager.INotificationManager> notificationManager;
    private Binding<com.gitblit.manager.IUserManager> userManager;
    private Binding<com.gitblit.manager.IAuthenticationManager> authenticationManager;
    private Binding<com.gitblit.transport.ssh.IPublicKeyManager> publicKeyManager;
    private Binding<com.gitblit.manager.IRepositoryManager> repositoryManager;
    private Binding<com.gitblit.manager.IProjectManager> projectManager;
    private Binding<com.gitblit.manager.IFederationManager> federationManager;
    private Binding<com.gitblit.manager.IGitblit> gitblit;

    public ProvideWebApplicationProvidesAdapter(DaggerModule module) {
      super("com.gitblit.wicket.GitBlitWebApp", null, IS_SINGLETON, "com.gitblit.DaggerModule.provideWebApplication()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      runtimeManager = (Binding<com.gitblit.manager.IRuntimeManager>) linker.requestBinding("com.gitblit.manager.IRuntimeManager", DaggerModule.class, getClass().getClassLoader());
      pluginManager = (Binding<com.gitblit.manager.IPluginManager>) linker.requestBinding("com.gitblit.manager.IPluginManager", DaggerModule.class, getClass().getClassLoader());
      notificationManager = (Binding<com.gitblit.manager.INotificationManager>) linker.requestBinding("com.gitblit.manager.INotificationManager", DaggerModule.class, getClass().getClassLoader());
      userManager = (Binding<com.gitblit.manager.IUserManager>) linker.requestBinding("com.gitblit.manager.IUserManager", DaggerModule.class, getClass().getClassLoader());
      authenticationManager = (Binding<com.gitblit.manager.IAuthenticationManager>) linker.requestBinding("com.gitblit.manager.IAuthenticationManager", DaggerModule.class, getClass().getClassLoader());
      publicKeyManager = (Binding<com.gitblit.transport.ssh.IPublicKeyManager>) linker.requestBinding("com.gitblit.transport.ssh.IPublicKeyManager", DaggerModule.class, getClass().getClassLoader());
      repositoryManager = (Binding<com.gitblit.manager.IRepositoryManager>) linker.requestBinding("com.gitblit.manager.IRepositoryManager", DaggerModule.class, getClass().getClassLoader());
      projectManager = (Binding<com.gitblit.manager.IProjectManager>) linker.requestBinding("com.gitblit.manager.IProjectManager", DaggerModule.class, getClass().getClassLoader());
      federationManager = (Binding<com.gitblit.manager.IFederationManager>) linker.requestBinding("com.gitblit.manager.IFederationManager", DaggerModule.class, getClass().getClassLoader());
      gitblit = (Binding<com.gitblit.manager.IGitblit>) linker.requestBinding("com.gitblit.manager.IGitblit", DaggerModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(runtimeManager);
      getBindings.add(pluginManager);
      getBindings.add(notificationManager);
      getBindings.add(userManager);
      getBindings.add(authenticationManager);
      getBindings.add(publicKeyManager);
      getBindings.add(repositoryManager);
      getBindings.add(projectManager);
      getBindings.add(federationManager);
      getBindings.add(gitblit);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.gitblit.wicket.GitBlitWebApp>}.
     */
    @Override
    public com.gitblit.wicket.GitBlitWebApp get() {
      return module.provideWebApplication(runtimeManager.get(), pluginManager.get(), notificationManager.get(), userManager.get(), authenticationManager.get(), publicKeyManager.get(), repositoryManager.get(), projectManager.get(), federationManager.get(), gitblit.get());
    }
  }
}
