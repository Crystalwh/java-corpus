// Code generated by dagger-compiler.  Do not edit.
package com.gitblit.git;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<GitServlet>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code GitServlet} and its
 * dependencies.
 * 
 * Being a {@code Provider<GitServlet>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<GitServlet>} and handling injection
 * of annotated fields.
 */
public final class GitServlet$$InjectAdapter extends Binding<GitServlet>
    implements Provider<GitServlet>, MembersInjector<GitServlet> {
  private Binding<com.gitblit.manager.IGitblit> gitblit;
  private Binding<org.eclipse.jgit.http.server.GitServlet> supertype;

  public GitServlet$$InjectAdapter() {
    super("com.gitblit.git.GitServlet", "members/com.gitblit.git.GitServlet", NOT_SINGLETON, GitServlet.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    gitblit = (Binding<com.gitblit.manager.IGitblit>) linker.requestBinding("com.gitblit.manager.IGitblit", GitServlet.class, getClass().getClassLoader());
    supertype = (Binding<org.eclipse.jgit.http.server.GitServlet>) linker.requestBinding("members/org.eclipse.jgit.http.server.GitServlet", GitServlet.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(gitblit);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<GitServlet>}.
   */
  @Override
  public GitServlet get() {
    GitServlet result = new GitServlet(gitblit.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<GitServlet>}.
   */
  @Override
  public void injectMembers(GitServlet object) {
    supertype.injectMembers(object);
  }
}
