/* Generated By:JavaCC: Do not edit this line. JavaCCParserTokenManager.java */
/**
 * This file contains the code for JavaCCParser generated
 * by JavaCCParser itself.
 */

package org.javacc.parser;
import static org.javacc.parser.Options.*;
import java.util.List;
import java.util.ArrayList;

/** Token Manager. */
public class JavaCCParserTokenManager implements JavaCCParserConstants
{
   int beginLine[] = new int[10];
   int beginCol[] = new int[10];
   int depth = 0;
   int size = 10;

   void saveBeginLineCol(int l, int c)
   {
      if (depth == size)
      {
         size += 5;
         int tmpbeginLine[] = new int[size];
         int tmpbeginCol[] = new int[size];

         System.arraycopy(beginLine, 0, beginLine = tmpbeginLine, 0, depth);
         System.arraycopy(beginCol, 0, beginCol = tmpbeginCol, 0, depth);
      }

      beginLine[depth] = l;
      beginCol[depth] = c;
      depth++;
   }

   void restoreBeginLineCol()
   {
      depth--;
      input_stream.adjustBeginLineColumn(beginLine[depth], beginCol[depth]);
   }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1a800000L) != 0L || (active1 & 0x4000000000000000L) != 0L || (active2 & 0x40L) != 0L)
            return 2;
         if ((active1 & 0x80000000000L) != 0L || (active2 & 0x8000L) != 0L)
            return 8;
         if ((active0 & 0xfffffffe0003fffeL) != 0L || (active1 & 0xffffffL) != 0L)
         {
            jjmatchedKind = 149;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 0x18800000L) != 0L)
            return 0;
         if ((active0 & 0xfeff9ffe0003fffeL) != 0L || (active1 & 0xffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x100600000000000L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0xcebfdffe0003f7feL) != 0L || (active1 & 0xfbfffeL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x3040000000000800L) != 0L || (active1 & 0x40001L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active0 & 0x4081816000000300L) != 0L || (active1 & 0xa2002L) != 0L)
            return 32;
         if ((active0 & 0xae3e5e9e0003f4feL) != 0L || (active1 & 0xf1dffcL) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
            return 32;
         }
         return -1;
      case 4:
         if ((active0 & 0xae02580e0003f0beL) != 0L || (active1 & 0xd11b7cL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0x3c069000000440L) != 0L || (active1 & 0x20c480L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x2a12180a0003f4beL) != 0L || (active1 & 0xd1121cL) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x8400400400000000L) != 0L || (active1 & 0x8960L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active0 & 0x2a0008020003f4beL) != 0L || (active1 & 0xd11210L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active0 & 0x12100800000000L) != 0L || (active1 & 0xcL) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x2a0000000003f49eL) != 0L || (active1 & 0x11010L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x80200000020L) != 0L || (active1 & 0xd00200L) != 0L)
            return 32;
         return -1;
      case 8:
         if ((active0 & 0xa0000000003f49cL) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 8;
            return 32;
         }
         if ((active0 & 0x2000000000000002L) != 0L || (active1 & 0x10010L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0x3f48cL) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 9;
            return 32;
         }
         if ((active0 & 0xa00000000000010L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active0 & 0x3f488L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 10;
            return 32;
         }
         if ((active0 & 0x4L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active0 & 0x3f480L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 11;
            return 32;
         }
         if ((active0 & 0x8L) != 0L || (active1 & 0x1000L) != 0L)
            return 32;
         return -1;
      case 12:
         if ((active0 & 0x3f400L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 12;
            return 32;
         }
         if ((active0 & 0x80L) != 0L)
            return 32;
         return -1;
      case 13:
         if ((active0 & 0x15400L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 13;
            return 32;
         }
         if ((active0 & 0x2a000L) != 0L)
            return 32;
         return -1;
      case 14:
         if ((active0 & 0x15000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 14;
            return 32;
         }
         if ((active0 & 0x400L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 142);
      case 37:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 38:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x80L);
      case 40:
         return jjStopAtPos(0, 99);
      case 41:
         return jjStopAtPos(0, 100);
      case 42:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20L);
      case 43:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x8L);
      case 44:
         return jjStopAtPos(0, 106);
      case 45:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x10L);
      case 46:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 47:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x1a800000L, 0x0L, 0x40L);
      case 58:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 105);
      case 60:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x90000L);
      case 61:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x61800L);
      case 63:
         return jjStopAtPos(0, 112);
      case 64:
         return jjStopAtPos(0, 148);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x33000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xc004L, 0x0L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x18L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x280L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x440L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 103);
      case 93:
         return jjStopAtPos(0, 104);
      case 94:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x600000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3800000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc000000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x700000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3800000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c000000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f00000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x3L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3cL, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f80L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc7e000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 101);
      case 124:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x100L);
      case 125:
         return jjStopAtPos(0, 102);
      case 126:
         return jjStopAtPos(0, 111);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 42:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10800000L, active1, 0L, active2, 0L);
      case 43:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 45:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 58:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         break;
      case 60:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 61:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 62:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x60800L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x38L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L, active1, 0L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0xd42L, active1, 0L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800400c000000000L, active1, 0x4L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x400041L, active2, 0L);
      case 102:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x20e080L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20820000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3801000000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40c04c0800000000L, active1, 0x180000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x70018L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x422L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x801000L, active2, 0L);
      case 124:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(2, 143);
         break;
      case 61:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(2, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         break;
      case 62:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 64:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x440L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x118L, active1, 0L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L, active1, 0x10100L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x282808L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x100002L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40180c0000000000L, active1, 0x1000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000800000000L, active1, 0x90L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0x800400L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc200L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800804600000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xa08200a000000000L, active1, 0x40L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000000000L, active1, 0x20000L, active2, 0L);
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 32);
         break;
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x440L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 32);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x18L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x3f000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x38101000000000L, active1, 0x100000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400010000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x1000L, active2, 0L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 32);
         break;
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 32);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 32);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 32);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x2002000400800000L, active1, 0x800400L, active2, 0L);
      case 103:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x200L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000800000000L, active1, 0x200020L, active2, 0L);
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 32);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 111:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0xc000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x4060000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800080200000000L, active1, 0x910L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x18L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L);
      case 78:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x3f000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0xcL);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xa00L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 32);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000800000000L, active1, 0x10L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000L, active1, 0L);
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x120L);
      case 107:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 32);
         break;
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000000000L, active1, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x800000L);
      case 114:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x2400000600000000L, active1, 0x40L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 32);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 32);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x3f080L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x4L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x18L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000L, active1, 0xc00000L);
      case 99:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 32);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 32);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x10800000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 104:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x110000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10100000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x800080000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 32);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 32);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x208L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x3f000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1cL, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000200000000L, active1, 0L);
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 32);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x10800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 32);
         break;
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400010L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L);
      case 42:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x8L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L, active1, 0L);
      case 69:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x10L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x3f000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 32);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 32);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 32);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0x11000L);
      case 112:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 32);
         break;
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         break;
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L, active1, 0L);
      case 68:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 1, 32);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x3f008L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L, active1, 0L);
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 32);
         break;
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      case 106:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 4, 32);
         break;
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0x8L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x3f000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x4L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L, active1, 0L);
      case 102:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 32);
         break;
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 57, 32);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L, active1, 0L);
      case 69:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 2, 32);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x8L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x3f000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa12_0(active0, 0x15000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x2a480L, active1, 0L);
      case 78:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 3, 32);
         break;
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 76, 32);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x15000L);
      case 78:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(12, 7, 32);
         return jjMoveStringLiteralDfa13_0(active0, 0x2a000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 13, 32);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(13, 15, 32);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 17, 32);
         break;
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x15000L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(13, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0x15000L);
      case 83:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 10, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(15, 12, 32);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(15, 14, 32);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(15, 16, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec38 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec43 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec44 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec45 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec46 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec47 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec48 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec49 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec50 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec51 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec52 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec53 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec54 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec55 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec56 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec57 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec58 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec59 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec60 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec61 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 65;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAddStates(12, 16);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(17, 19);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 97)
                     kind = 97;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 26:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar != 36)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 12);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(41, 12);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar != 46)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(27, 29);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(27, 29);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(47, 12);
                  break;
               case 48:
                  if (curChar != 48)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(12, 16);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(50, 6);
                  break;
               case 51:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(51, 6);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(58, 12);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 61:
                  if (curChar == 46)
                     jjCheckNAdd(62);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(64, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               case 1:
                  if (kind > 26)
                     kind = 26;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 88)
                     kind = 88;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(37, 39);
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(40, 42);
                  break;
               case 25:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 49:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(50, 6);
                  break;
               case 52:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 56:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 62:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 26)
                     kind = 26;
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               case 32:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 65 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x80000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 29)
                     kind = 29;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return 1;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x40000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   34, 35, 12, 38, 39, 42, 43, 23, 24, 26, 14, 16, 49, 51, 6, 52, 
   59, 8, 9, 12, 23, 24, 28, 26, 34, 35, 12, 44, 45, 12, 53, 54, 
   60, 61, 62, 10, 11, 17, 18, 20, 25, 27, 29, 36, 37, 40, 41, 46, 
   47, 55, 56, 57, 58, 63, 64, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec61[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\114\117\117\113\101\110\105\101\104", 
"\111\107\116\117\122\105\137\103\101\123\105", "\120\101\122\123\105\122\137\102\105\107\111\116", 
"\120\101\122\123\105\122\137\105\116\104", "\112\101\126\101\103\117\104\105", "\124\117\113\105\116", 
"\123\120\105\103\111\101\114\137\124\117\113\105\116", "\115\117\122\105", "\123\113\111\120", 
"\124\117\113\105\116\137\115\107\122\137\104\105\103\114\123", "\105\117\106", 
"\104\103\114\137\120\101\122\123\105\122\137\102\105\107\111\116", "\104\103\114\137\120\101\122\123\105\122\137\105\116\104", 
"\111\116\103\137\120\101\122\123\105\122\137\102\105\107\111\116", "\111\116\103\137\120\101\122\123\105\122\137\105\116\104", 
"\104\105\106\137\120\101\122\123\105\122\137\102\105\107\111\116", "\104\105\106\137\120\101\122\123\105\122\137\105\116\104", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\164\145\155\160\154\141\164\145", 
"\164\171\160\145\156\141\155\145", null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\75", "\74", "\41", 
"\176", "\77", "\72", "\72\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", 
"\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\76\76\76", "\76\76", "\76", "\43", "\56\56\56", "\74\74\75", "\76\76\75", "\76\76\76\75", 
"\74\74", "\100", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
   "AFTER_EGEN", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 
   2, 3, 4, 4, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffe0003ffffL, 0xfffffffe11ffffffL, 0x13fffffL, 
};
static final long[] jjtoSkip = {
   0xe1fc0000L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe0000000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11e000000L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[65];
private final int[] jjstateSet = new int[130];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JavaCCParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaCCParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 65; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 152)
         {
            jjmatchedKind = 152;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 32)
         {
            jjmatchedKind = 32;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 32)
         {
            jjmatchedKind = 32;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 32)
         {
            jjmatchedKind = 32;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 24 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          restoreBeginLineCol(); input_stream.backup(1);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 26 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      case 28 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        saveBeginLineCol(input_stream.getBeginLine(),
                         input_stream.getBeginColumn());
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 139 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[139]);
        lengthOfMatch = jjstrLiteralImages[139].length();
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
     matchedToken.image = ">";
         break;
      case 140 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[140]);
        lengthOfMatch = jjstrLiteralImages[140].length();
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
         break;
      default : 
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
